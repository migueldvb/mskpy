#!/usr/bin/python
from __future__ import print_function
import sys
import argparse
import datetime
import astropy.units as u
import mskpy
from mskpy import ephem, util, between, Coma

today = datetime.date.today()

class ListAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        v = [float(x) for x in values.split(',')]
        setattr(namespace, self.dest, v)

parser = argparse.ArgumentParser(description='Generate an ephemeris.')
parser.add_argument('target', type=str, action='store', nargs='*',
                    help='The name of the target')

parser.add_argument('--start', type=str, action='store',
                    default=today.isoformat(),
                    help='The first day of the ephemeris, YYYY-MM-DD [today].')
parser.add_argument('--end', type=str, action='store', default=None,
                    help='The last day of the ephemeris, YYYY-MM-DD [today + n].')
parser.add_argument('-n', type=int, action='store', default=30,
                    help='The number of days for the ephemeris.')
parser.add_argument('--selong', type=str, action=ListAction, default=[0, 180],
                    help='The allowed solar elongation limits.')
parser.add_argument('--observer', type=str, action='store', default='Earth',
                    help='The observer.')

parser.add_argument('--afrho', type=float, action='store', default=None,
                    help='Afrho parameter [cm].')
parser.add_argument('-k', type=float, action='store', default=-2.0,
                    help='Afrho heliocentric distance power-law slope.')
parser.add_argument('--rh', type=float, action='store', default=1.0,
                    help='Afrho parameter specified at this rh [AU].')
parser.add_argument('--ef2af', type=float, action='store', default=3.5,
                    help='The ratio of IR emissivity to albedo.')
parser.add_argument('--tscale', type=float, action='store', default=1.1,
                    help='Effective temperature scale factor.')
parser.add_argument('--phasef', type=str, action='store', default='phaseHM',
                    help='Phase function: phaseK, phaseH, phaseHM.')
parser.add_argument('--wave', type=str, action=ListAction,
                    default=[0.6, 2.2, 10, 20],
                    help='Wavelengths for estimate flux densities.')
parser.add_argument('--unit', type=str, action='store', default='Jy',
                    help='Flux density unit.')

args = parser.parse_args()
if args.target == []:
    parser.print_help()
    print()
    exit()

if args.end is None:
    ymd = [int(x) for x in args.start.split('-')]
    start = datetime.date(*ymd).toordinal()
    end = datetime.date.fromordinal(start + args.n).isoformat()
    n = args.n + 1
else:
    end = args.end
    n = int(util.cal2time(end).jd - util.cal2time(args.start).jd + 1)

target = ephem.getspiceobj(' '.join(args.target))
try:
    observer = eval('ephem.' + args.observer.capitalize())
except AttributeError:
    observer = ephem.getspiceobj(' '.join(args.observer))

ephemeris_only = True if args.afrho is None else False

if ephemeris_only:
    t = target.ephemeris(observer, [args.start, end], num=n)
else:
    afrho1 = args.afrho / args.rh**args.k * u.cm
    coma = Coma(target.state, afrho1, k=args.k,
                ef2af=args.ef2af, tscale=args.tscale,
                phasef=getattr(mskpy.models, args.phasef))
    t = coma.lightcurve(observer, [args.start, end], args.wave * u.um, num=n,
                        unit=u.Unit(args.unit), verbose=False)

t = t[between(t['selong'], args.selong)]
t.pprint(max_width=-1, max_lines=-1)

